generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  name               String
  password           String
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  ReportComments     Comment[]
  records            Record[]
  Report             Report[]
}

model Record {
  id        Int      @id @default(autoincrement())
  userId    String
  data      String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id        Int          @id @default(autoincrement())
  title     String
  activity  String
  content   String
  status    ReportStatus
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  date      DateTime
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  reportId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model Company {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]

  @@map("companies")
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  position  String
  phone     String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])

  @@index([name])
  @@map("employees")
}

model CompanyDirectory {
  id          Int      @id @default(autoincrement())
  floor       Int
  companyName String
  contactName String
  position    String
  phone       String
  createdAt   DateTime @default(now())

  @@index([floor])
  @@index([companyName])
  @@map("company_directory")
}

model DeliveryItem {
  id            String         @id @default(cuid())
  trackingNo    String         @unique
  itemName      String
  status        DeliveryStatus
  receiverName  String
  receiverPhone String
  senderName    String
  senderPhone   String
  location      String?
  notes         String?
  weight        Float?
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([trackingNo])
  @@index([status])
  @@map("delivery_items")
}

model JobRequest {
  id          String              @id @default(cuid())
  title       String
  description String
  priority    Priority
  status      JobStatus
  category    String
  location    String
  assignedTo  String?
  requestedBy String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@index([status])
  @@index([priority])
  @@index([requestedBy])
  @@map("job_requests")
}
model Property {
  id           String        @id @default(uuid())
  name         String
  location     String
  createdAt    DateTime      @default(now())
  patrolChecks PatrolCheck[]

  @@map("properties")
}

model PatrolCheck {
  id              String      @id @default(cuid())
  checkPoint      String
  status          CheckStatus
  notes           String?
  imagePath       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  checkedBy       String
  propertyId      String
  totalCheckPoint Int
  property        Property    @relation(fields: [propertyId], references: [id])

  @@map("patrol_checks")
}
model MealCount {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  breakfast Int      @default(0)
  lunch     Int      @default(0)
  dinner    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum ReportStatus {
  DAILY
  HOURLY
  IMPORTANT
}

enum DeliveryStatus {
  PENDING
  DELIVERED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CheckStatus {
  PENDING
  COMPLETED
  ISSUES_FOUND
  MISSED
}