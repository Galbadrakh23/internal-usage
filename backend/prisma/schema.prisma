generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  name           String
  password       String
  role           Role             @default(USER)
  createdAt      DateTime         @default(now())
  ReportComments Comment[]
  DailyReports   DailyReport[]
  records        Record[]
  HourlyActivity HourlyActivity[]
  deliveryItems    DeliveryItem[]
  jobRequests      JobRequest[]
  jobRequestComments JobRequestComment[]
  patrolChecks     PatrolCheck[]
}

model Record {
  id        Int      @id @default(autoincrement())
  userId    String
  data      String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HourlyActivity {
  id        String   @id @default(cuid())
  activity  String
  title     String
  date      DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("hourly_activities")
}

model DailyReport {
  id        Int          @id @default(autoincrement())
  title     String
  content   String
  status    ReportStatus
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  date      DateTime
  comments  Comment[]
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     File[]

  @@index([date])
  @@index([userId])
}

model Comment {
  id        Int         @id @default(autoincrement())
  content   String
  userId    String
  reportId  Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  report    DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model File {
  id         Int         @id @default(autoincrement())
  filename   String
  path       String
  mimeType   String
  size       Int
  reportId   Int
  uploadedAt DateTime    @default(now())
  report     DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model Company {
  id        String     @id @default(uuid())
  name      String     @unique
  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("companies")
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  position  String
  phone     String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  @@index([name])
  @@map("employees")
}
model CompanyDirectory {
  id          Int      @id @default(autoincrement())
  floor       Int      // Floor number
  companyName String   // Company name
  contactName String   // Contact person name
  position    String   // Position/role
  phone       String   // Phone number
  createdAt   DateTime @default(now())

  @@map("company_directory")
  @@index([floor])
  @@index([companyName])
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum ReportStatus {
  ИЛГЭЭМЖ
  ТЭМДЭГЛЭЛ
  МЭДЭЭЛЭЛ
}
// Delivery Items Management
model DeliveryItem {
  id          String   @id @default(cuid())
  trackingNo  String   @unique
  itemName    String
  status      DeliveryStatus
  receiverName String
  receiverPhone String
  senderName   String
  senderPhone  String
  location     String?
  notes        String?
  weight       Float?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  
  @@index([trackingNo])
  @@index([status])
  @@map("delivery_items")
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELLED
}

// Job Request Management
model JobRequest {
  id          String    @id @default(cuid())
  title       String
  description String
  priority    Priority
  status      JobStatus
  category    String
  location    String
  assignedTo  String?
  requestedBy String
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [requestedBy], references: [id])
  comments    JobRequestComment[]
  
  @@index([status])
  @@index([priority])
  @@index([requestedBy])
  @@map("job_requests")
}

model JobRequestComment {
  id           String     @id @default(cuid())
  content      String
  jobRequestId String
  userId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  jobRequest   JobRequest @relation(fields: [jobRequestId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id])
  
  @@index([jobRequestId])
  @@map("job_request_comments")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Patrol Check Management
model PatrolCheck {
  id          String    @id @default(cuid())
  location    String
  checkPoint  String
  status      CheckStatus
  notes       String?
  issues      String?
  imagePath   String?
  performedBy String
  startTime   DateTime
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [performedBy], references: [id])
  
  @@index([location])
  @@index([performedBy])
  @@index([startTime])
  @@map("patrol_checks")
}

enum CheckStatus {
  PENDING
  COMPLETED
  ISSUES_FOUND
  MISSED
}
